# integrated_weaviate_script.py

import logging
import subprocess
import os
import tempfile
from faster_whisper import WhisperModel
from unstructured.partition.auto import partition
from unstructured.cleaners.core import replace_unicode_quotes, clean_bullets
from unstructured.cleaners.extract import extract_datetimetz, extract_email_address
import weaviate

# Configure logging
logging.basicConfig()
logging.getLogger("faster_whisper").setLevel(logging.DEBUG)

# Provided file path for the video
video_file_path = "C:\\Users\\strau\\Documents\\Obsidian Vault\\cena.mp4"

# Initialize the WhisperModel for translation
transcriber = WhisperModel("large-v2", device="cuda", compute_type="float16")

def extract_audio_with_ffmpeg(video_path):
    try:
        temp_audio_path = tempfile.mktemp(suffix='.mp3')
        cmd = ['ffmpeg', '-i', video_path, '-vn', '-acodec', 'mp3', temp_audio_path]
        subprocess.run(cmd, check=True)
        return temp_audio_path
    except subprocess.CalledProcessError as e:
        logging.error(f"FFmpeg error: {e}")
        return None
    except Exception as e:
        logging.error(f"Error extracting audio: {e}")
        return None

def translate_and_save(transcriber, audio_path, output_path):
    try:
        with open(output_path, 'w', encoding='utf-8') as file:
            segments, info = transcriber.transcribe(audio_path, task="translate")
            full_translation = ' '.join(segment.text for segment in segments)
            file.write(full_translation)
            return full_translation
    except Exception as e:
        logging.error(f"Error during translation: {e}")
        return None

def process_text(text):
    elements = partition(text=text, content_type='text/plain')
    for element in elements:
        element.apply(replace_unicode_quotes)
        element.apply(clean_bullets)
        # Add more cleaning functions as necessary

    # Extract information like dates, email addresses, etc.
    dates = extract_datetimetz(text)
    emails = extract_email_address(text)
    # Add more extraction functions as necessary

    return elements, dates, emails

def run_unstructured_ingest(input_path):
    embedding_provider = "langchain-huggingface"
    output_dir = "local-output-to-weaviate"

    command = [
        "unstructured-ingest",
        "local",
        "--input-path", input_path,
        "--output-dir", output_dir,
        "--strategy", "fast",
        "--chunk-elements",
        "--embedding-provider", embedding_provider,
        "--num-processes", "2",
        "--verbose",
        "weaviate",
        "--host-url", "http://localhost:8080",
        "--class-name", "ProductsMarketV9"
    ]

    try:
        subprocess.run(command, check=True)
        logging.info("unstructured-ingest completed successfully")
    except subprocess.CalledProcessError as e:
        logging.error(f"unstructured-ingest failed: {e}")

def setup_weaviate_schema():
    schema = {
        "class": "ProductsMarketV9",
        "description": "This property was generated by Weaviate's auto-schema feature on Sat Jan 20 18:01:03 2024",
        "invertedIndexConfig": {
            "bm25": {"b": 0.75, "k1": 1.2},
            "cleanupIntervalSeconds": 60,
            "stopwords": {"additions": None, "preset": "en", "removals": None}
        },
        "moduleConfig": {
            "text2vec-transformers": {"poolingStrategy": "masked_mean", "vectorizeClassName": True}
        },
        "multiTenancyConfig": {"enabled": False},
        "properties": [
            {
                "dataType": ["text"],
                "description": "This property was generated by Weaviate's auto-schema feature on Sat Jan 20 18:01:03 2024",
                "indexFilterable": True,
                "indexSearchable": True,
                "moduleConfig": {
                    "text2vec-transformers": {"skip": False, "vectorizePropertyName": False}
                },
                "name": "orgs_article_bvid",
                "tokenization": "word"
            },
            {
                "dataType": ["text[]"],
                "description": "This property was generated by Weaviate's auto-schema feature on Sat Jan 20 18:01:03 2024",
                "indexFilterable": True,
                "indexSearchable": True,
                "moduleConfig": {
                    "text2vec-transformers": {"skip": False, "vectorizePropertyName": False}
                },
                "name": "signal_combined",
                "tokenization": "word"
            },
            {
                "dataType": ["number"],
                "description": "This property was generated by Weaviate's auto-schema feature on Sat Jan 20 18:01:03 2024",
                "indexFilterable": True,
                "indexSearchable": False,
                "moduleConfig": {
                    "text2vec-transformers": {"skip": False, "vectorizePropertyName": False}
                },
                "name": "_split_id"
            },
            {
                "dataType": ["text[]"],
                "description": "This property was generated by Weaviate's auto-schema feature on Sat Jan 20 18:01:03 2024",
                "indexFilterable": True,
                "indexSearchable": True,
                "moduleConfig": {
                    "text2vec-transformers": {"skip": False, "vectorizePropertyName": False}
                },
                "name": "company_aliases",
                "tokenization": "word"
            },
            {
                "dataType": ["text"],
                "description": "This property was generated by Weaviate's auto-schema feature on Sat Jan 20 18:01:03 2024",
                "indexFilterable": True,
                "indexSearchable": True,
                "moduleConfig": {
                    "text2vec-transformers": {"skip": False, "vectorizePropertyName": False}
                },
                "name": "rowKey",
                "tokenization": "word"
            },
            {
                "dataType": ["text"],
                "description": "This property was generated by Weaviate's auto-schema feature on Sat Jan 20 18:01:03 2024",
                "indexFilterable": True,
                "indexSearchable": True,
                "moduleConfig": {
                    "text2vec-transformers": {"skip": False, "vectorizePropertyName": False}
                },
                "name": "title",
                "tokenization": "word"
            },
            {
                "dataType": ["date"],
                "description": "This property was generated by Weaviate's auto-schema feature on Sat Jan 20 18:01:03 2024",
                "indexFilterable": True,
                "indexSearchable": False,
                "moduleConfig": {
                    "text2vec-transformers": {"skip": False, "vectorizePropertyName": False}
                },
                "name": "timestamp"
            },
            {
                "dataType": ["text[]"],
                "description": "This property was generated by Weaviate's auto-schema feature on Sat Jan 20 18:01:03 2024",
                "indexFilterable": True,
                "indexSearchable": True,
                "moduleConfig": {
                    "text2vec-transformers": {"skip": False, "vectorizePropertyName": False}
                },
                "name": "company_names",
                "tokenization": "word"
            },
            {
                "dataType": ["text"],
                "description": "This property was generated by Weaviate's auto-schema feature on Sat Jan 20 18:01:03 2024",
                "indexFilterable": True,
                "indexSearchable": True,
                "moduleConfig": {
                    "text2vec-transformers": {"skip": False, "vectorizePropertyName": False}
                },
                "name": "content",
                "tokenization": "word"
            },
            {
                "dataType": ["text"],
                "description": "This property was generated by Weaviate's auto-schema feature on Sat Jan 20 18:01:03 2024",
                "indexFilterable": True,
                "indexSearchable": True,
                "moduleConfig": {
                    "text2vec-transformers": {"skip": False, "vectorizePropertyName": False}
                },
                "name": "originalSource",
                "tokenization": "word"
            },
            {
                "dataType": ["number"],
                "description": "This property was generated by Weaviate's auto-schema feature on Sat Jan 20 18:01:03 2024",
                "indexFilterable": True,
                "indexSearchable": False,
                "moduleConfig": {
                    "text2vec-transformers": {"skip": False, "vectorizePropertyName": False}
                },
                "name": "sentiment"
            }
        ],
        "replicationConfig": {"factor": 1},
        "shardingConfig": {
            "virtualPerPhysical": 128,
            "desiredCount": 1,
            "actualCount": 1,
            "desiredVirtualCount": 128,
            "actualVirtualCount": 128,
            "key": "_id",
            "strategy": "hash",
            "function": "murmur3"
        },
        "vectorIndexConfig": {
            "skip": False,
            "cleanupIntervalSeconds": 300,
            "maxConnections": 64,
            "efConstruction": 128,
            "ef": -1,
            "dynamicEfMin": 100,
            "dynamicEfMax": 500,
            "dynamicEfFactor": 8,
            "vectorCacheMaxObjects": 1000000000000,
            "flatSearchCutoff": 40000,
            "distance": "cosine",
            "pq": {
                "enabled": False,
                "bitCompression": False,
                "segments": 0,
                "centroids": 256,
                "trainingLimit": 100000,
                "encoder": {
                    "type": "kmeans",
                    "distribution": "log-normal"
                }
            },
            "bq": {"enabled": False}
        },
        "vectorIndexType": "hnsw",
        "vectorizer": "text2vec-transformers"
    }

    client = weaviate.Client("http://localhost:8080")
    try:
        client.schema.delete_all()
    except Exception as e:
        logging.error(f"Error deleting existing schema: {e}")

    try:
        client.schema.create(schema)
    except Exception as e:
        logging.error(f"Error creating schema: {e}")


def main():
    setup_weaviate_schema()  # Call to setup the Weaviate schema
    audio_file_path = extract_audio_with_ffmpeg(video_file_path)
    if audio_file_path:
        translation_output_path = "path_to_translated_text_output.txt"
        translated_text = translate_and_save(transcriber, audio_file_path, translation_output_path)
        os.remove(audio_file_path)  # Clean up temporary audio file

        if translated_text:
            processed_elements, dates, emails = process_text(translated_text)
            run_unstructured_ingest(translation_output_path)
    else:
        logging.error("Failed to extract audio from video.")

if __name__ == "__main__":
    main()
